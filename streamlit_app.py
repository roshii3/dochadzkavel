# streamlit_velitel_full.py
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta, time
import pytz
from supabase import create_client, Client

# ---------- CONFIG ----------
st.set_page_config(page_title="Veliteƒæ - Doch√°dzka", layout="wide")
st.markdown("""
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    </style>
""", unsafe_allow_html=True)

# ---------- DB ----------
DATABAZA_URL = st.secrets["DATABAZA_URL"]
DATABAZA_KEY = st.secrets["DATABAZA_KEY"]
VELITEL_PASS = st.secrets["velitel_password"]
databaze: Client = create_client(DATABAZA_URL, DATABAZA_KEY)
tz = pytz.timezone("Europe/Bratislava")

POSITIONS = ["Veliteƒæ","CCTV","Br√°ny","Sklad2","Sklad3","Turniket2","Turniket3","Plombovac2","Plombovac3"]

# ---------- LOGIN ----------
if "velitel_logged" not in st.session_state:
    st.session_state.velitel_logged = False

if not st.session_state.velitel_logged:
    password = st.text_input("Zadaj heslo pre pr√≠stup", type="password")
    if st.button("Prihl√°si≈•"):
        if password == VELITEL_PASS:
            st.session_state.velitel_logged = True
        else:
            st.error("Nespr√°vne heslo.")
    st.stop()

# ---------- NAƒå√çTANIE D√ÅT ----------
def load_attendance(start_dt, end_dt):
    res = databaze.table("attendance").select("*")\
        .gte("timestamp", start_dt.isoformat())\
        .lt("timestamp", end_dt.isoformat()).execute()
    df = pd.DataFrame(res.data)
    if df.empty:
        return df
    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    df["timestamp"] = df["timestamp"].apply(lambda x: tz.localize(x) if pd.notna(x) and x.tzinfo is None else x)
    df["date"] = df["timestamp"].dt.date
    return df

# ---------- VYPIS VSETKYCH ZAZNAMOV ----------
def all_entries(pos_df: pd.DataFrame):
    """
    Vr√°ti v≈°etky pr√≠chody a odchody pre poz√≠ciu, chronologicky.
    """
    if pos_df.empty:
        return []
    df_sorted = pos_df.sort_values("timestamp")
    entries = []
    for _, row in df_sorted.iterrows():
        ts_str = row["timestamp"].strftime("%H:%M") if pd.notna(row["timestamp"]) else "‚Äî"
        entries.append(f"‚û°Ô∏è {row['action']}: {ts_str}")
    return entries

# ---------- ZOBRAZENIE D√ÅT ----------
st.title("üïí Prehƒæad doch√°dzky - Veliteƒæ")

today = datetime.now(tz).date()
yesterday = today - timedelta(days=1)
start_dt = tz.localize(datetime.combine(yesterday, datetime.min.time()))
end_dt = tz.localize(datetime.combine(today + timedelta(days=1), datetime.min.time()))
df = load_attendance(start_dt, end_dt)

if df.empty:
    st.warning("‚ö†Ô∏è Nie s√∫ dostupn√© ≈æiadne d√°ta pre dne≈°ok ani vƒçeraj≈°ok.")
else:
    for day in [yesterday, today]:
        st.subheader(day.strftime("%A %d.%m.%Y"))
        df_day = df[df["date"] == day]
        if df_day.empty:
            st.write("‚Äî ≈æiadne z√°znamy ‚Äî")
            continue
        for pos in POSITIONS:
            st.markdown(f"**{pos}**")
            pos_df = df_day[df_day["position"] == pos]
            entries = all_entries(pos_df)
            if not entries:
                st.write("‚Äî ≈æiadne z√°znamy ‚Äî")
            else:
                for e in entries:
                    st.write(e)
# ---------- TABUƒΩKA ODCHODOV VELITEƒΩA ZA TENTO T√ù≈ΩDE≈á ----------
st.subheader("üìã Potvrden√© odchody veliteƒæa (aktu√°lny t√Ω≈æde≈à)")

# V√Ωpoƒçet pondelka aktu√°lneho t√Ω≈æd≈àa
today_dt = datetime.now(tz)
monday_dt = today_dt - timedelta(days=today_dt.weekday())
start_week = tz.localize(datetime.combine(monday_dt.date(), datetime.min.time()))
end_week = tz.localize(datetime.combine(today_dt.date() + timedelta(days=1), datetime.min.time()))

# Naƒç√≠tanie d√°t len pre tento t√Ω≈æde≈à
df_week = load_attendance(start_week, end_week)

if not df_week.empty:
    # Filtrovanie len pre poz√≠ciu Veliteƒæ a akciu "odchod"
    df_velitel = df_week[(df_week["position"] == "Veliteƒæ") & (df_week["action"].str.lower() == "odchod")]
    if df_velitel.empty:
        st.info("≈Ωiadne potvrden√© odchody veliteƒæa v tomto t√Ω≈ædni.")
    else:
        df_velitel["D√°tum"] = df_velitel["timestamp"].dt.strftime("%d.%m.%Y")
        df_velitel["ƒåas"] = df_velitel["timestamp"].dt.strftime("%H:%M")
        df_tab = df_velitel[["D√°tum", "ƒåas", "position", "action"]].rename(
            columns={"position": "Poz√≠cia", "action": "Akcia"}
        ).sort_values(["D√°tum", "ƒåas"])
        st.dataframe(df_tab, use_container_width=True)
else:
    st.info("Nie s√∫ dostupn√© d√°ta pre tento t√Ω≈æde≈à.")
